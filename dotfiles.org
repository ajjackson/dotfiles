* Setup

This block of elisp loads an elisp file to set variables that can be
used in =:tangle= arguments. It will be run automatically at document
load due to local variables set at the bottom of this file; the user
probabably needs to authorise this with 'y'.

When tangling this file from a script in batch mode, the local
variables will be ignored so instead the file should be included with
=emacs -Q --batch -l get-environment.el ...=.

#+NAME: guess-system
#+BEGIN_SRC emacs-lisp
  (let ((this-dir (file-name-directory
                   (if load-file-name load-filename buffer-file-name))))
   (load (expand-file-name "get-environment.el" this-dir) ))
#+END_SRC

Perhaps it would be simpler to just put that code into the main
setup/build script, and have that be an elisp script with the
=#!emacs --script= shebang line. It does seem useful to be able
to get the same environment in interactive org sessions though?

#+begin_src conf :mkdirp yes :tangle "test/demo"
This is great
#+end_src

#+begin_src conf :tangle (if (member system '("Arctopus" "DreamMachine")) "test/demo" "no")
for music
#+end_src

#+begin_src conf :mkdirp yes :tangle (if (not (member system '("Arctopus" "DreamMachine"))) "test/demo" "no")
for sports
#+end_src



# Use M-x normal-mode to re-run local variables/eval and set the environment for tangle logic

# Local Variables:
# eval: (progn (org-babel-goto-named-src-block "guess-system") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# End:
