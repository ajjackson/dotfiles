* Setup

This block of elisp loads an elisp file to set variables that can be
used in =:tangle= arguments. It will be run automatically at document
load due to local variables set at the bottom of this file; the user
probabably needs to authorise this with 'y'.

#+name: guess-system
#+begin_src emacs-lisp
  (setq system
        (let ((hostname (system-name)))
          (cond ((member hostname '("Angel" "Angel.lan" "Angel.local")) "Angel")
                ((member hostname '("ajj-mbp-1" "ajj-mbp-1.local"
                                    "dock-ajj-mbp-1" "dock-ajj-mbp-1.esc.rl.ac.uk"))
                 "ajj-mbp-1")
                ('t hostname))
          ))

  ;; Centering, rows only supported for patched dmenu
  (setq dmenu-patched-p
        (cond ((member system '("Arctopus" "scpc041")) 't)
              ('t nil)))
#+end_src

#+RESULTS: guess-system

* Dummy files

#+begin_src conf :mkdirp yes :tangle "test/demo"
This is great
#+end_src

#+begin_src conf :tangle (if (member system '("Arctopus" "DreamMachine")) "test/demo" "no")
for music
#+end_src

#+begin_src conf :mkdirp yes :tangle (if (not (member system '("Arctopus" "DreamMachine"))) "test/demo" "no")
for sports
#+end_src

* i3
  :PROPERTIES:
  :header-args: :tangle "i3/.config/i3/config"
  :END:

#+begin_src conf :mkdirp yes
# Super key
set $mod Mod4

font pango:Inconsolata 8

# Start XDG autostart .desktop files using dex. See also
# https://wiki.archlinux.org/index.php/XDG_Autostart
exec --no-startup-id dex-autostart --autostart --environment i3

# Hide titlebars unless tabbing/stacking
for_window [class="^.*"] border none

# NetworkManager is the most popular way to manage wireless networks on Linux,
# and nm-applet is a desktop environment-independent system tray GUI for it.
exec --no-startup-id nm-applet

# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# move tiling windows via drag & drop by left-clicking into the title bar,
# or left-clicking anywhere into the window while holding the floating modifier.
tiling_drag modifier titlebar

# start a terminal
bindsym $mod+Return exec alacritty msg create-window || alacritty

# kill focused window
bindsym $mod+Shift+q kill

# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
set $ws10 "10"

# switch to workspace
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10

# cycle workspaces
bindsym $mod+Tab workspace next
bindsym $mod+Shift+Tab workspace prev

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"

# Appearance tweaks
gaps inner 4
# gaps outer -4

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
# bar {
#         status_command i3status
# }

#+end_src

** Dmenu
On patched systems, use a modified dmenu_run
#+begin_src sh :mkdirp yes :shebang "#!/bin/sh" :tangle (if dmenu-patched-p "i3/.local/bin/dmenu_run" "no")
dmenu_path | dmenu -c -l 6 -g 3 "$@" | ${SHELL:-"/bin/sh"} &
#+end_src

#+RESULTS:

Launch dmenu or i3-dmenu-desktop with shortcuts

#+NAME: get_dmenu_args
#+BEGIN_SRC emacs-lisp
  (if dmenu-patched "-c -l 6 -g 3" "")
#+END_SRC

#+begin_src conf :noweb yes
  bindsym $mod+d exec --no-startup-id dmenu_run
  bindsym $mod+Shift+d exec --no-startup-id i3-dmenu-desktop --dmenu='dmenu -i <<get_dmenu_args()>>'
#+end_src


** Compositing
Use picom (may not be available on all systems)
- on scpc041 this is started by =/etc/xdg/autostart/picom.desktop= so
  redundant to also include in i3 config

#+begin_src conf :tangle (if (equal system "Arctopus") "i3/.config/i3/config" "no")
# Enable compositing (i.e. for transparent terminals)
exec --no-startup-id picom

#+end_src
** Monitors

This is system-dependent, use xrandr commands to rotate and position monitors

#+begin_src conf :mkdirp yes :tangle (if (equal system "Arctopus") "i3/.config/i3/config" "no")
  # Sort out monitor positions
  exec xrandr --output DVI-D-0 --rotate left --right-of HDMI-0
  exec xrandr --output HDMI-0 --pos 0x550

  # They are in the wrong order so assign initial workspaces
  workspace 1 output HDMI-0
  workspace 2 output DVI-D-0
#+end_src

** Screen lock, suspend etc.

#+NAME: get_wallpaper_args
#+BEGIN_SRC emacs-lisp
  (if (equal system "scpc041") "-i /usr/share/backgrounds/f34/default/f34-02-night.png" "")
#+END_SRC

#+begin_src conf :noweb yes
  # xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
  # screen before suspend. Use loginctl lock-session to lock your screen.
  exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork <<get_wallpaper_args()>>
#+end_src

  We also create a shell script for screen lock, shutdown etc, borrowed from
  https://faq.i3wm.org/question/239/how-do-i-suspendlockscreen-and-logout.1.html

  ,#+begin_src sh :tangle i3/.local/bin/i3exit :mkdirp yes :shebang "#!/bin/sh"
    lock() {
        i3lock
    }

    case "$1" in
        lock)
            lock
            ;;
        logout)
            i3-msg exit
            ;;
        suspend)
            systemctl suspend
            ;;
        hibernate)
            systemctl hibernate
            ;;
        reboot)
            systemctl reboot
            ;;
        shutdown)
            systemctl poweroff
            ;;
        ,*)
            echo "Usage: $0 {lock|logout|suspend|hibernate|reboot|shutdown}"
            exit 2
    esac

    exit 0
#+end_src

But instead of using an i3 mode, try using dmenu

#+begin_src conf 
  bindsym $mod+c exec echo -e "lock\nlogout\nsuspend\nhibernate\nreboot\nshutdown" | dmenu "$@" | xargs i3exit
#+end_src


** Launch some more programs and services
#+begin_src conf :tangle "i3/.config/i3/config"

# Fancy status bar
exec --no-startup-id $HOME/.config/polybar/launch.sh

# Wallpaper
exec --no-startup-id nitrogen --restore

#+end_src


* End matter

# Use M-x normal-mode to re-run local variables/eval and set the environment for tangle logic

# Local Variables:
# eval: (progn (org-babel-goto-named-src-block "guess-system") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# End:
